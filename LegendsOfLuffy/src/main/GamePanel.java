/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main;
//huh
import objects.SuperObject;
import entity.Player;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.logging.Level;
import java.util.logging.Logger;
import objects.Villain;
import tile.TileManager;
import static entity.Player.villainCount;

/**
 * Panel with all game components
 * @author stefanchirica
 */
public class GamePanel extends javax.swing.JPanel implements Runnable {
    //Screen settings

    final int originalTileSize = 16; // 16*16 tile
    final int scale = 3;

    public final int tileSize = originalTileSize * scale; //48 * 48 tile
    public final int maxScreenColumn = 16;
    public final int maxScreenRow = 12;
    public final int screenWidth = tileSize * maxScreenColumn; //768 pixels
    public final int screenHeight = tileSize * maxScreenRow; //576 pixels

    //WORLD SETTINGS
    public int maxWorldCol = 16;
    public int maxWorldRow = 12;
    public final int worldWidth = tileSize * maxWorldCol;
    public final int worldHeight = tileSize * maxWorldRow;

    //Set FPS
    final int FPS = 60;

    // System
    public TileManager tileM = new TileManager(this);
    KeyHandler keyH = new KeyHandler();
    Sound sound = new Sound();
    //Sound se = new Sound();
    Thread gameThread;
    public CollisionChecker cChecker = new CollisionChecker(this);
    public AssetSetter aSetter = new AssetSetter(this);
    public UI ui = new UI(this);
    
    //Entity and object
    public Player player = new Player(this, keyH);
    public SuperObject obj[] = new SuperObject[10];
    

    //Set player's default position
    int playerX = 100;
    int playerY = 100;
    int playerSpeed = 100;

    //Game variables
    public int key;
    public int level = 1;

    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();
        this.addKeyListener(keyH);
        this.setFocusable(true);
        ui.showMessage("Lord Rob: You'll never beat my gauntlet! Mwahahaha...");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 768, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Puts keys in the correct places depending on what level it is
     */
    public void setupGame() {
        aSetter.setObject();
        playMusic(0);
    }

    /**
     * Creates game thread
     */
    public void startGameThread() {
        gameThread = new Thread(this);
        gameThread.start();
    }

    @Override
    /**
     * Game loop
     */
    public void run() {

        double drawInterval = 1000000000 / FPS;  //0.01666 seconds
        double delta = 0;
        long lastTime = System.nanoTime();
        long currentTime; //nextDrawTime = System.nanoTime() + drawInterval;

        while (gameThread != null) {
            currentTime = System.nanoTime();
            delta += (currentTime - lastTime) / drawInterval;
            lastTime = currentTime;

            if (delta >= 1) {
                update();
                repaint();
                delta--;
            }

        }

        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Updates location of player on the screen
     */
    public void update() {
        player.update();
    }

    @Override
    /**
     * Draws tiles, player, and objects on the screen
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //g.drawString("FPS: 60", 50, 50);
        Graphics2D g2 = (Graphics2D) g;

        //TILE
        tileM.draw(g2);

        //OBJECT
        for (int i = 0; i < obj.length; i++) {
            //System.out.print(obj.toString());

            if (obj[i] != null) {
                obj[i].draw(g2, this);
            }
        }

        //PLAYER
        player.draw(g2);
        
        //UI
        ui.draw(g2);

        g2.dispose();
    }

    /**
     * Plays something in the sound array as a background song
     * @param i = array index
     */
    public void playMusic (int i) {
        sound.setFile(i);
        sound.play();
        sound.loop();
    }
    
    /**
     * Stops any sounds
     */
    public void stopMusic() {
        sound.stop();
    }
    
    /**
     * Plays sound effects (e.g. "less gooo")
     * @param i = index from array soundURL
     */
    public void playSE (int i) {
        sound.setFile(i);
        sound.play();
    }
    

    /**
     * Sets key locations depending on the level
     */
    public void keySet() {

        //Locations for keys in level 1
        if (level == 1) {
            obj[0] = new Villain();
            obj[0].worldX = 2 * tileSize;
            obj[0].worldY = 3 * tileSize;

            obj[1] = new Villain();
            obj[1].worldX = 3 * tileSize;
            obj[1].worldY = 4 * tileSize;

            obj[2] = new Villain();
            obj[2].worldX = 5 * tileSize;
            obj[2].worldY = 8 * tileSize;

            obj[3] = new Villain();
            obj[3].worldX = 12 * tileSize;
            obj[3].worldY = 3 * tileSize;

            obj[4] = new Villain();
            obj[4].worldX = 6 * tileSize;
            obj[4].worldY = 4 * tileSize;
        }

        //Locations for keys in level 2
        if (level == 2) {
            obj[0] = new Villain();
            obj[0].worldX = 1 * tileSize;
            obj[0].worldY = 1 * tileSize;

            obj[1] = new Villain();
            obj[1].worldX = 1 * tileSize;
            obj[1].worldY = 6 * tileSize;

            obj[2] = new Villain();
            obj[2].worldX = 14 * tileSize;
            obj[2].worldY = 3 * tileSize;

            obj[3] = new Villain();
            obj[3].worldX = 11 * tileSize;
            obj[3].worldY = 9 * tileSize;

            obj[4] = new Villain();
            obj[4].worldX = 14 * tileSize;
            obj[4].worldY = 5 * tileSize;
        }

        //Locations for keys in level 3
        if (level == 3) {
            obj[0] = new Villain();
            obj[0].worldX = 2 * tileSize;
            obj[0].worldY = 3 * tileSize;

            obj[1] = new Villain();
            obj[1].worldX = 3 * tileSize;
            obj[1].worldY = 4 * tileSize;

            obj[2] = new Villain();
            obj[2].worldX = 5 * tileSize;
            obj[2].worldY = 8 * tileSize;

            obj[3] = new Villain();
            obj[3].worldX = 12 * tileSize;
            obj[3].worldY = 3 * tileSize;

            obj[4] = new Villain();
            obj[4].worldX = 6 * tileSize;
            obj[4].worldY = 4 * tileSize;
        }

        //Locations for keys in level 4
        if (level == 4) {
            obj[0] = new Villain();
            obj[0].worldX = 2 * tileSize;
            obj[0].worldY = 3 * tileSize;

            obj[1] = new Villain();
            obj[1].worldX = 3 * tileSize;
            obj[1].worldY = 4 * tileSize;

            obj[2] = new Villain();
            obj[2].worldX = 5 * tileSize;
            obj[2].worldY = 10 * tileSize;

            obj[3] = new Villain();
            obj[3].worldX = 12 * tileSize;
            obj[3].worldY = 3 * tileSize;

            obj[4] = new Villain();
            obj[4].worldX = 6 * tileSize;
            obj[4].worldY = 4 * tileSize;
        }

        //Locations for keys in level 5;
        if (level == 5) {
            obj[0] = new Villain();
            obj[0].worldX = 2 * tileSize;
            obj[0].worldY = 3 * tileSize;

            obj[1] = new Villain();
            obj[1].worldX = 27 * tileSize;
            obj[1].worldY = 4 * tileSize;

            obj[2] = new Villain();
            obj[2].worldX = 5 * tileSize;
            obj[2].worldY = 8 * tileSize;

            obj[3] = new Villain();
            obj[3].worldX = 12 * tileSize;
            obj[3].worldY = 19 * tileSize;

            obj[4] = new Villain();
            obj[4].worldX = 26 * tileSize;
            obj[4].worldY = 21 * tileSize;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
